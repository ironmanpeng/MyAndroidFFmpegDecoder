apply plugin: 'com.android.application'
ext {
    boolean isWindow = isWindowsOS()
    if(isWindow){
        native_sdk_path = rootDir.getAbsolutePath().replace('\\','/')+"/app"
    }else{
        native_sdk_path = file(rootDir.getAbsolutePath()+"/app")
    }
}
android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.pengtg.myandroidffmpegdecoder"
        minSdkVersion 23
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        ndk {
            abiFilters 'armeabi-v7a'
        }

        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
    }
    buildTypes {
        debug{

            debuggable true
            jniDebuggable true

            externalNativeBuild {
                cmake {
                    arguments '-DANDROID_PLATFORM=android-16', '-DANDROID_TOOLCHAIN=clang',
                            '-DANDROID_STL=gnustl_static',
                            "-DPATH_TO_MEDIACORE:STRING=${native_sdk_path}"
                    cFlags '-D__STDC_CONSTANT_MACROS'
                    // 编译优化，设置函式是否能被 inline 的伪指令长度
                    cppFlags '-D__STDC_LIMIT_MACROS', '-fexceptions',
                            "-frtti -std=gnu++11"


                }
            }
        }

        release {
            //minifyEnabled false
            //proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            externalNativeBuild {
                cmake {
                    arguments '-DANDROID_PLATFORM=android-16', '-DANDROID_TOOLCHAIN=clang',
                            '-DANDROID_STL=gnustl_static',
                            "-DPATH_TO_MEDIACORE:STRING=${native_sdk_path}"
                    cFlags '-D__STDC_CONSTANT_MACROS'
                    // 编译优化，设置函式是否能被 inline 的伪指令长度
                    cppFlags '-D__STDC_LIMIT_MACROS', '-fexceptions',
                            "-frtti -std=gnu++11"

                }
            }
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

clean.doFirst {
    delete "${projectDir}/.externalNativeBuild"
}

/** 判断是否为Windows操作系统 */
boolean isWindowsOS(){
    boolean isWindowsOS = false;
    String osName = System.getProperty("os.name");
    println("os.name=" + osName);
    if(osName == null || "".equals(osName)) {
        return false;
    }
    if(osName.toLowerCase().indexOf("windows") > -1){
        isWindowsOS = true;
    }
    return isWindowsOS;
}